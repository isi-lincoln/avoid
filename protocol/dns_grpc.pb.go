// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: dns.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DNS_Update_FullMethodName = "/protocol.DNS/Update"
	DNS_Delete_FullMethodName = "/protocol.DNS/Delete"
	DNS_List_FullMethodName   = "/protocol.DNS/List"
	DNS_Show_FullMethodName   = "/protocol.DNS/Show"
	DNS_Clear_FullMethodName  = "/protocol.DNS/Clear"
)

// DNSClient is the client API for DNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNSClient interface {
	// Update: Create or Modify DNS entry
	Update(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	// Delete: Remove DNS entry from db
	Delete(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	// List: Display all entries by key
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Show: Display a single entry's value given a key
	Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error)
	// Clear: Remove all entries from memory
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*EntryResponse, error)
}

type dNSClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSClient(cc grpc.ClientConnInterface) DNSClient {
	return &dNSClient{cc}
}

func (c *dNSClient) Update(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, DNS_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) Delete(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, DNS_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, DNS_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error) {
	out := new(ShowResponse)
	err := c.cc.Invoke(ctx, DNS_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, DNS_Clear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSServer is the server API for DNS service.
// All implementations must embed UnimplementedDNSServer
// for forward compatibility
type DNSServer interface {
	// Update: Create or Modify DNS entry
	Update(context.Context, *EntryRequest) (*EntryResponse, error)
	// Delete: Remove DNS entry from db
	Delete(context.Context, *EntryRequest) (*EntryResponse, error)
	// List: Display all entries by key
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Show: Display a single entry's value given a key
	Show(context.Context, *ShowRequest) (*ShowResponse, error)
	// Clear: Remove all entries from memory
	Clear(context.Context, *ClearRequest) (*EntryResponse, error)
	mustEmbedUnimplementedDNSServer()
}

// UnimplementedDNSServer must be embedded to have forward compatible implementations.
type UnimplementedDNSServer struct {
}

func (UnimplementedDNSServer) Update(context.Context, *EntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDNSServer) Delete(context.Context, *EntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDNSServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDNSServer) Show(context.Context, *ShowRequest) (*ShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedDNSServer) Clear(context.Context, *ClearRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedDNSServer) mustEmbedUnimplementedDNSServer() {}

// UnsafeDNSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNSServer will
// result in compilation errors.
type UnsafeDNSServer interface {
	mustEmbedUnimplementedDNSServer()
}

func RegisterDNSServer(s grpc.ServiceRegistrar, srv DNSServer) {
	s.RegisterService(&DNS_ServiceDesc, srv)
}

func _DNS_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNS_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).Update(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNS_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).Delete(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNS_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNS_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).Show(ctx, req.(*ShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNS_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNS_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DNS_ServiceDesc is the grpc.ServiceDesc for DNS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.DNS",
	HandlerType: (*DNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _DNS_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DNS_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DNS_List_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _DNS_Show_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _DNS_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns.proto",
}
