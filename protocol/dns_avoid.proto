syntax = 'proto3';

option go_package = "github.com/isi-lincoln/avoid/protocol";

package protocol;

/*
 * The DNS service is responsible for managing the CoreDNS's
 * internal dns responses to clients.
*/
service AVOIDDNS {
  // Update: Create or Modify DNS entry
  rpc Update (EntryRequest) returns (EntryResponse) {}

  // Delete: Remove DNS entry from db
  rpc Delete (EntryRequest) returns (EntryResponse) {}

  // List: Display all entries by key
  rpc List (ListRequest) returns (ListResponse) {}

  // Show: Display a single entry's value given a key
  rpc Show (ShowRequest) returns (ShowResponse) {}

  // Clear: Remove all entries from memory
  rpc Clear (ClearRequest) returns (EntryResponse) {}
}


// Identification: the mechanism of pinning a UE to a DNS request
// There are probably better ways of achieving this other than through
// IP, if the UE is able to speak the protocol and can provide information
// such as ISMI, or other UUIDs that can 1:1 map the UE.
message Identification {
    string uuid = 1;
    string ipv4 = 2;
    string ipv6 = 3;
    string ismi = 4;
}

message Record {
    string Name = 1;  
    int64 Rrtype = 2;
    int64 Class = 3;
    int64 Ttl = 4;
    int64 Rdlength = 5;
}

message DNSEntry {
    string ue = 1; // requesting devices id
    string name = 2; // unique id ~ this is a domain name
    repeated string arecords = 3; // A records
    repeated string aaaarecords = 4; // AAAA records
    int64 ttl = 5; // what should the ttl of this record be
    string txt = 6; // we can use the txt field for UE if needed
    int64 version = 7;
}

message EntryRequest {
    repeated DNSEntry entries = 1;
}

message EntryResponse {
    string response = 1;
    int64 code = 2;
}

message ListRequest {}
message ListResponse {
    repeated string keys = 1;
}

message ShowRequest {
    string ue = 1;
    string name = 2;
}

message ShowResponse {
    DNSEntry entry = 1;
}

message ClearRequest {}
