// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: dns_avoid.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AVOIDDNS_Update_FullMethodName = "/protocol.AVOIDDNS/Update"
	AVOIDDNS_Delete_FullMethodName = "/protocol.AVOIDDNS/Delete"
	AVOIDDNS_List_FullMethodName   = "/protocol.AVOIDDNS/List"
	AVOIDDNS_Show_FullMethodName   = "/protocol.AVOIDDNS/Show"
	AVOIDDNS_Clear_FullMethodName  = "/protocol.AVOIDDNS/Clear"
)

// AVOIDDNSClient is the client API for AVOIDDNS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The DNS service is responsible for managing the CoreDNS's
// internal dns responses to clients.
type AVOIDDNSClient interface {
	// Update: Create or Modify DNS entry
	Update(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	// Delete: Remove DNS entry from db
	Delete(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error)
	// List: Display all entries by key
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Show: Display a single entry's value given a key
	Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error)
	// Clear: Remove all entries from memory
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*EntryResponse, error)
}

type aVOIDDNSClient struct {
	cc grpc.ClientConnInterface
}

func NewAVOIDDNSClient(cc grpc.ClientConnInterface) AVOIDDNSClient {
	return &aVOIDDNSClient{cc}
}

func (c *aVOIDDNSClient) Update(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, AVOIDDNS_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aVOIDDNSClient) Delete(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, AVOIDDNS_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aVOIDDNSClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, AVOIDDNS_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aVOIDDNSClient) Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowResponse)
	err := c.cc.Invoke(ctx, AVOIDDNS_Show_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aVOIDDNSClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*EntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EntryResponse)
	err := c.cc.Invoke(ctx, AVOIDDNS_Clear_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AVOIDDNSServer is the server API for AVOIDDNS service.
// All implementations must embed UnimplementedAVOIDDNSServer
// for forward compatibility
//
// The DNS service is responsible for managing the CoreDNS's
// internal dns responses to clients.
type AVOIDDNSServer interface {
	// Update: Create or Modify DNS entry
	Update(context.Context, *EntryRequest) (*EntryResponse, error)
	// Delete: Remove DNS entry from db
	Delete(context.Context, *EntryRequest) (*EntryResponse, error)
	// List: Display all entries by key
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Show: Display a single entry's value given a key
	Show(context.Context, *ShowRequest) (*ShowResponse, error)
	// Clear: Remove all entries from memory
	Clear(context.Context, *ClearRequest) (*EntryResponse, error)
	mustEmbedUnimplementedAVOIDDNSServer()
}

// UnimplementedAVOIDDNSServer must be embedded to have forward compatible implementations.
type UnimplementedAVOIDDNSServer struct {
}

func (UnimplementedAVOIDDNSServer) Update(context.Context, *EntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAVOIDDNSServer) Delete(context.Context, *EntryRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAVOIDDNSServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAVOIDDNSServer) Show(context.Context, *ShowRequest) (*ShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedAVOIDDNSServer) Clear(context.Context, *ClearRequest) (*EntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedAVOIDDNSServer) mustEmbedUnimplementedAVOIDDNSServer() {}

// UnsafeAVOIDDNSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AVOIDDNSServer will
// result in compilation errors.
type UnsafeAVOIDDNSServer interface {
	mustEmbedUnimplementedAVOIDDNSServer()
}

func RegisterAVOIDDNSServer(s grpc.ServiceRegistrar, srv AVOIDDNSServer) {
	s.RegisterService(&AVOIDDNS_ServiceDesc, srv)
}

func _AVOIDDNS_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AVOIDDNSServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AVOIDDNS_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AVOIDDNSServer).Update(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AVOIDDNS_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AVOIDDNSServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AVOIDDNS_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AVOIDDNSServer).Delete(ctx, req.(*EntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AVOIDDNS_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AVOIDDNSServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AVOIDDNS_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AVOIDDNSServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AVOIDDNS_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AVOIDDNSServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AVOIDDNS_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AVOIDDNSServer).Show(ctx, req.(*ShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AVOIDDNS_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AVOIDDNSServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AVOIDDNS_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AVOIDDNSServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AVOIDDNS_ServiceDesc is the grpc.ServiceDesc for AVOIDDNS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AVOIDDNS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.AVOIDDNS",
	HandlerType: (*AVOIDDNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _AVOIDDNS_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AVOIDDNS_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AVOIDDNS_List_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _AVOIDDNS_Show_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _AVOIDDNS_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns_avoid.proto",
}
